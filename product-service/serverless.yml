service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: "2"

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [SQSQueue, Arn]
    - Effect: Allow
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: node-js-sqs-sns-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: otisorigin@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue

    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]

functions:
  getProductsList:
    handler: src/lambdas/getProductsList.get
    events:
      - http:
          method: get
          path: products
          cors: true
  getProductsById:
    handler: src/lambdas/getProductsById.get
    events:
      - http:
          method: get
          path: products/{productId}
          cors: true
  createProduct:
    handler: src/lambdas/createProduct.add
    events:
      - http:
          method: post
          path: products
          cors: true
  catalogBatchProcess:
    handler: src/lambdas/catalogBatchProcess.add
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
